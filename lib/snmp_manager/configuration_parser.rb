#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module SNMPManager
  class ConfigurationParser < Racc::Parser

module_eval(<<'...end configuration_parser.y/module_eval...', 'configuration_parser.y', 46)
  def initialize(tokenizer_klass = ConfigurationTokenizer)
    @tokenizer_klass = tokenizer_klass
  end
  
  def parse(string)
    @tokenizer = @tokenizer_klass.new(string)
    yyparse(@tokenizer, :each)
    return @object
  ensure
    @tokenizer = nil
  end
  
  def on_error(err_token, err_val, values)
    puts @tokenizer.line_num
    super
  end
  
  def next_token
    @tokenizer.next_token
  end
...end configuration_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    12,    33,    15,    21,    20,    10,    11,    15,    14,
    13,    10,    11,    34,     6,     7,    19,    15,    10,    11,
    10,    11,    27,    28,    29,    30,    31,    32,    24,    23,
    25,    26,   nil,    15,   nil,   nil,    10,    11,    24,    23,
    25,    26,   nil,    15,   nil,    15,    10,    11,    10,    11,
    15,   nil,   nil,    10,    11 ]

racc_action_check = [
     1,     2,    18,    18,    16,    16,    18,    18,     8,     8,
     7,     8,     8,    19,     1,     1,    14,    16,     1,     1,
    16,    16,    17,    17,    17,    17,    17,    17,    17,    17,
    17,    17,   nil,    17,   nil,   nil,    17,    17,    22,    22,
    22,    22,   nil,    22,   nil,    13,    22,    22,    13,    13,
     9,   nil,   nil,     9,     9 ]

racc_action_pointer = [
   nil,     0,     1,   nil,   nil,   nil,   nil,    -6,    -7,    35,
   nil,   nil,   nil,    30,    -1,   nil,     2,    18,   -12,    -1,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -23,   -23,    -1,    -3,    -4,    -5,   -14,   -23,   -23,
   -12,   -13,    35,   -23,   -23,   -14,   -23,   -23,   -23,   -23,
   -15,   -16,   -23,    -8,    -9,   -10,   -11,   -17,   -18,   -19,
   -20,   -21,   -22,    -6,    -7 ]

racc_goto_table = [
    17,     5,     4,     3,    18,     1,     8,   nil,    22,    22,
   nil,   nil,   nil,    22 ]

racc_goto_check = [
     5,     4,     3,     2,     5,     1,     6,   nil,     5,     5,
   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     5,     2,     1,     0,    -9,     5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     9,    16 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 21, :_reduce_none,
  0, 21, :_reduce_2,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  4, 24, :_reduce_6,
  4, 23, :_reduce_7,
  3, 25, :_reduce_8,
  3, 25, :_reduce_9,
  3, 25, :_reduce_10,
  3, 25, :_reduce_11,
  1, 25, :_reduce_12,
  1, 25, :_reduce_13,
  1, 25, :_reduce_14,
  3, 26, :_reduce_15,
  3, 26, :_reduce_16,
  3, 26, :_reduce_17,
  3, 26, :_reduce_18,
  3, 26, :_reduce_19,
  3, 26, :_reduce_20,
  3, 26, :_reduce_21,
  3, 26, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 35

racc_token_table = {
  false => 0,
  :error => 1,
  :OR => 2,
  :AND => 3,
  :LES => 4,
  :GRT => 5,
  :LES_EQ => 6,
  :GRT_EQ => 7,
  :EQUAL => 8,
  :DIFF => 9,
  :MULT => 10,
  :DIV => 11,
  :PLUS => 12,
  :MINUS => 13,
  :NEWLINE => 14,
  :IDENTIFIER => 15,
  ":" => 16,
  :STRING => 17,
  :INTEGER => 18,
  :FLOAT => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "OR",
  "AND",
  "LES",
  "GRT",
  "LES_EQ",
  "GRT_EQ",
  "EQUAL",
  "DIFF",
  "MULT",
  "DIV",
  "PLUS",
  "MINUS",
  "NEWLINE",
  "IDENTIFIER",
  "\":\"",
  "STRING",
  "INTEGER",
  "FLOAT",
  "$start",
  "entries",
  "entry",
  "rule",
  "variable",
  "math_expr",
  "logic_expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'configuration_parser.y', 11)
  def _reduce_2(val, _values, result)
     @object = Configuration.new 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'configuration_parser.y', 19)
  def _reduce_6(val, _values, result)
     @object.define_variable(val[0], &val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 22)
  def _reduce_7(val, _values, result)
     @object.define_rule(val[2], &val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 25)
  def _reduce_8(val, _values, result)
     return lambda { |d| val[0].call(d) / val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 26)
  def _reduce_9(val, _values, result)
     return lambda { |d| val[0].call(d) * val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 27)
  def _reduce_10(val, _values, result)
     return lambda { |d| val[0].call(d) + val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 28)
  def _reduce_11(val, _values, result)
     return lambda { |d| val[0].call(d) - val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 29)
  def _reduce_12(val, _values, result)
     return lambda { |d| Integer(val[0]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 30)
  def _reduce_13(val, _values, result)
     return lambda { |d| Float(val[0]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 31)
  def _reduce_14(val, _values, result)
     return lambda { |d| d[val[0]] }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 34)
  def _reduce_15(val, _values, result)
     return lambda { |d| val[0].call(d) && val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 35)
  def _reduce_16(val, _values, result)
     return lambda { |d| val[0].call(d) || val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 36)
  def _reduce_17(val, _values, result)
     return lambda { |d| val[0].call(d) < val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 37)
  def _reduce_18(val, _values, result)
     return lambda { |d| val[0].call(d) > val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 38)
  def _reduce_19(val, _values, result)
     return lambda { |d| val[0].call(d) <= val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 39)
  def _reduce_20(val, _values, result)
     return lambda { |d| val[0].call(d) >= val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 40)
  def _reduce_21(val, _values, result)
     return lambda { |d| val[0].call(d) == val[1].call(d) }
    result
  end
.,.,

module_eval(<<'.,.,', 'configuration_parser.y', 41)
  def _reduce_22(val, _values, result)
     return lambda { |d| val[0].call(d) != val[1].call(d) }
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class ConfigurationParser
  end   # module SNMPManager
